from django.shortcuts import render
from clonotypes.models import Clonotype, ClonoFilter
from samples.models import Sample
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.http import HttpResponse


def all(request, sample_id):
    sample = Sample.objects.get(id=sample_id)
    clonotypes = Clonotype.objects.filter(sample=sample)
    paginator = Paginator(clonotypes, 25)
    page = request.GET.get('page')
    try:
        clonotypes = paginator.page(page)
    except PageNotAnInteger:
        clonotypes = paginator.page(1)
    except EmptyPage:
        clonotypes = paginator.page(paginator.num_pages)
    context = {'sample': sample, 'clonotypes': clonotypes}
    return render(request, 'all.html', context)


def detail(request, clonotype_id):
    pass
#    try:
    clonotype = Clonotype.objects.get(id=clonotype_id)
    sample = clonotype.sample
    context = {'clonotype': clonotype, 'sample': sample}
    return render(request, 'detail.html', context)


def bubble_bak(request, clonofilter):
    ''' Takes in a filter and returns a bubble image generated by matplolib '''
    from matplotlib.figure import Figure
    from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

    fig = Figure()
    fig.add_subplot()

    canvas = FigureCanvas(fig)
    response = HttpResponse(content_type='image/png')
    canvas.print_png(response)
    return response


def bubble(request, clonofilter):
    ''' Takes in a filter and returns a bubble image generated by matplolib '''
    from matplotlib.figure import Figure
    from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
    from numpy import genfromtxt
    from scipy import sqrt
    from pylab import text, xlabel, ylabel

    fig = Figure()
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(111)

    x = []
    y = []
    color = []
    area = []

    vj_counts = clonofilter.vj_counts()

    for v_index, list in enumerate(vj_counts):
        for j_index, counts in enumerate(list):
            x.append(v_index)
            y.append(j_index)
            color.append(counts)
            area.append(counts/1000)


#    durl = 'http://datasets.flowingdata.com/crimeRatesByState2005.csv'
#    rdata = genfromtxt(durl, dtype='S8,f,f,f,f,f,f,f,i', delimiter=',')
#    for data in rdata:
#        x.append(data[1])  # murder
#        y.append(data[5])  # burglary
#        color.append(data[6])  # larceny_theft
#        area.append(sqrt(data[8]))  # population
#        # plotting the first eigth letters of the state's name
#        text(data[1], data[5],
#             data[0], size=11, horizontalalignment='center')

    sct = ax.scatter(x, y, c=color, s=area, linewidths=2, edgecolor='w')
    sct.set_alpha(0.75)

#    ax.axis([0, 11, 200, 1280])
#    xlabel('Murders per 100,000 population')
#    ylabel('Burglaries per 100,000 population')

    response = HttpResponse(content_type='image/png')
    canvas.print_png(response)
    return response


def bubble_default(request, sample_id):
    ''' If no filter is defined, you can still plot a bubble given just a sample id with this function '''
    s = Sample.objects.filter(id=sample_id).get()
    clonofilter = ClonoFilter(sample=s, min_copy=0)
    return bubble(request, clonofilter)

## Testing below


def simple(request):
    '''Test of Matlab code. Should be removed once TDD version of bubblechart is implemented'''
    import random
    import django
    import datetime

    from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
    from matplotlib.figure import Figure
    from matplotlib.dates import DateFormatter

    fig = Figure()
    ax = fig.add_subplot(111)
    x = []
    y = []
    now = datetime.datetime.now()
    delta = datetime.timedelta(days=1)
    for i in range(10):
        x.append(now)
        now += delta
        y.append(random.randint(0, 1000))
    ax.plot_date(x, y, '-')
    ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))
    fig.autofmt_xdate()
    canvas = FigureCanvas(fig)
    response = HttpResponse(content_type='image/png')
    canvas.print_png(response)
    return response


def bubble_test(request):
    '''Test of generating a bubble function to see how numpy/matplotlib is interactively'''
    from pylab import *
    from scipy import *
    import django

    from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
    from matplotlib.figure import Figure
    from matplotlib.dates import DateFormatter

    fig = Figure()
    ax = fig.add_subplot(111)
    canvas = FigureCanvas(fig)
    # reading the data from a csv file
    durl = 'http://datasets.flowingdata.com/crimeRatesByState2005.csv'
    rdata = genfromtxt(durl, dtype='S8,f,f,f,f,f,f,f,i', delimiter=',')

    rdata[0] = zeros(8)  # cutting the label's titles
    rdata[1] = zeros(8)  # cutting the global statistics

    x = []
    y = []
    color = []
    area = []

    for data in rdata:
        x.append(data[1])  # murder
        y.append(data[5])  # burglary
        color.append(data[6])  # larceny_theft
        area.append(sqrt(data[8]))  # population
        # plotting the first eigth letters of the state's name
        text(data[1], data[5],
             data[0], size=11, horizontalalignment='center')

    # making the scatter plot
    sct = ax.scatter(x, y, c=color, s=area, linewidths=2, edgecolor='w')
    sct.set_alpha(0.75)

    ax.axis([0, 11, 200, 1280])
    xlabel('Murders per 100,000 population')
    ylabel('Burglaries per 100,000 population')

    response = django.http.HttpResponse(content_type='image/png')
    canvas.print_png(response)
    return response
