from django.shortcuts import render
from clonotypes.models import Clonotype, ClonoFilter
from samples.models import Sample
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.http import HttpResponse


def all(request, sample_id):
    sample = Sample.objects.get(id=sample_id)
    clonotypes = Clonotype.objects.filter(sample=sample)
    paginator = Paginator(clonotypes, 25)
    page = request.GET.get('page')
    try:
        clonotypes = paginator.page(page)
    except PageNotAnInteger:
        clonotypes = paginator.page(1)
    except EmptyPage:
        clonotypes = paginator.page(paginator.num_pages)
    context = {'sample': sample, 'clonotypes': clonotypes}
    return render(request, 'all.html', context)


def detail(request, clonotype_id):
    pass
#    try:
    clonotype = Clonotype.objects.get(id=clonotype_id)
    sample = clonotype.sample
    context = {'clonotype': clonotype, 'sample': sample}
    return render(request, 'detail.html', context)


def bubble(request, clonofilter):
    ''' Takes in a filter and returns a bubble image generated by matplolib '''
    from matplotlib.figure import Figure
    from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
    from pylab import text, xlabel, ylabel

    response = HttpResponse(content_type='image/png')
    fig = Figure()
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(111)

    x = []
    y = []
    color = []
    area = []

    vj_counts = clonofilter.vj_counts()

    for v_index, list in enumerate(vj_counts):
        for j_index, counts in enumerate(list):
            x.append(v_index)
            y.append(j_index)
            color.append(counts)
            area.append(counts )
#        text(data[1], data[5],
#             data[0], size=11, horizontalalignment='center')

    sct = ax.scatter(x, y, c=color, s=area, linewidths=2, edgecolor='w')
    sct.set_alpha(0.75)

#    ax.axis([0, 11, 200, 1280])
#    xlabel('Murders per 100,000 population')
#    ylabel('Burglaries per 100,000 population')

    canvas.print_png(response)
    return response


def bubble_default(request, sample_id):
    ''' If no filter is defined, you can still plot a bubble given just a sample id with this function '''
    s = Sample.objects.filter(id=sample_id).get()
    clonofilter = ClonoFilter(sample=s, min_copy=0)
    return bubble(request, clonofilter)

def spectratype(request, clonofilter):
    from matplotlib.figure import Figure
    from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
    from numpy import array

    response = HttpResponse(content_type='image/png')
    fig = Figure()
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(111)

    cdr3_sums = array(clonofilter.cdr3_length_sum())
    ax.plot(cdr3_sums[:,0].tolist(), cdr3_sums[:,1].tolist(), '-')
    ax = fig.add_subplot(111)

    canvas.print_png(response)
    return response

def spectratype_default(request, sample_id):
    s = Sample.objects.filter(id=sample_id).get()
    clonofilter = ClonoFilter(sample=s)
    return spectratype(request, clonofilter)
